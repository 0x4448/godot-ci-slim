---
name: Release

on:
  workflow_call:
    inputs:
      godotVersion:
        type: string
        required: true

  workflow_dispatch:
    inputs:
      godotVersion:
        type: string
        required: true

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  release:
    name: Release
    uses: ./.github/workflows/build.yaml

    with:
      godotVersion: ${{ inputs.godotVersion }}
      exportPlatform: ${{ matrix.platforms }}
      dotNet: false

    strategy:
      matrix:
        platforms:
          - linux
          - web

  release-dotnet:
    name: Release .NET
    uses: ./.github/workflows/build.yaml

    with:
      godotVersion: ${{ inputs.godotVersion }}
      exportPlatform: ${{ matrix.platforms }}
      dotNet: true

    strategy:
      matrix:
        platforms:
          - linux

  create-release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [release, release-dotnet]
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Create release
        shell: bash
        run: |
          latestRelease=$(curl -s https://api.github.com/repos/godotengine/godot/releases/latest)
          latestReleaseName=$(echo "$latestRelease" | jq --raw-output '.name')
          release=$(curl -s https://api.github.com/repos/godotengine/godot/releases/tags/${{ inputs.godotVersion }}-stable)
          releaseName=$(echo "$release" | jq --raw-output '.name')
          title='${{ inputs.godotVersion }}-stable'

          cat <<'EOF' > /tmp/notes
          - `docker pull ghcr.io/${{ github.repository }}:${{ inputs.godotVersion }}-linux`
          - `docker pull ghcr.io/${{ github.repository }}:${{ inputs.godotVersion }}-web`
          - `docker pull ghcr.io/${{ github.repository }}:${{ inputs.godotVersion }}-dotnet-linux`
          EOF

          declare -a args

          if [ "${{ github.ref_name }}" != "main" ]; then
            args+=("--draft")
          fi

          if [ "$releaseName" == "$latestReleaseName" ]; then
            args+=("--latest")
          else
            args+=("--latest=false")
          fi

          gh release create "$releaseName" --target "${{ github.ref_name }}" --title "$title" --notes-file /tmp/notes "${args[@]}"
